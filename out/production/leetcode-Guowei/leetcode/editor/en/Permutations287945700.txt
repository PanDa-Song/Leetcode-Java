class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> list = new ArrayList<>();
        backtrack(list, 0, nums);
        return list;
    }
    
    private void backtrack(List<List<Integer>> list, int start, int[] nums) {
        if (start == nums.length) {
            List<Integer> tempList = new ArrayList<>();
            for (int num : nums) {
                tempList.add(num);
            }
            list.add(new ArrayList<>(tempList));
            return;
        }
        for (int i = start; i < nums.length; i++){
            swap(nums,start,i);
            backtrack(list,start + 1, nums);
            swap(nums,start,i);
        }
    }
    private void swap(int[] nums, int m, int n) {
            int temp = nums[m];
            nums[m] = nums[n];
            nums[n] = temp;
    }
}
//runtime:1 ms
//memory:37.4 MB
